// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SummerSchoolCovidAPI.Models;

namespace SummerSchoolCovidAPI.Migrations
{
    [DbContext(typeof(CovidAPIContext))]
    [Migration("20210219112106_Initial_Migration")]
    partial class Initial_Migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("SummerSchoolCovidAPI.Models.CovidCase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateActioned")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfectedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("InfectedUserId");

                    b.HasIndex("LocationId");

                    b.ToTable("CovidCases");
                });

            modelBuilder.Entity("SummerSchoolCovidAPI.Models.CovidCaseContact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CovidCaseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfectedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CovidCaseId");

                    b.HasIndex("InfectedUserId");

                    b.HasIndex("LocationId");

                    b.ToTable("CovidCaseContacts");
                });

            modelBuilder.Entity("SummerSchoolCovidAPI.Models.InfectedUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Infected")
                        .HasColumnType("bit");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("InfectedUsers");
                });

            modelBuilder.Entity("SummerSchoolCovidAPI.Models.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CNumberInfected")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("SummerSchoolCovidAPI.Models.CovidCase", b =>
                {
                    b.HasOne("SummerSchoolCovidAPI.Models.InfectedUser", "InfectedUser")
                        .WithMany()
                        .HasForeignKey("InfectedUserId");

                    b.HasOne("SummerSchoolCovidAPI.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("InfectedUser");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SummerSchoolCovidAPI.Models.CovidCaseContact", b =>
                {
                    b.HasOne("SummerSchoolCovidAPI.Models.CovidCase", "CovidCase")
                        .WithMany()
                        .HasForeignKey("CovidCaseId");

                    b.HasOne("SummerSchoolCovidAPI.Models.InfectedUser", "InfectedUser")
                        .WithMany()
                        .HasForeignKey("InfectedUserId");

                    b.HasOne("SummerSchoolCovidAPI.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("CovidCase");

                    b.Navigation("InfectedUser");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SummerSchoolCovidAPI.Models.InfectedUser", b =>
                {
                    b.HasOne("SummerSchoolCovidAPI.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });
#pragma warning restore 612, 618
        }
    }
}
